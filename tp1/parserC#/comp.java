/* Generated By:JavaCC: Do not edit this line. comp.java */
public class comp implements compConstants {
  public static void main(String args[]) throws ParseException {
        comp parser;
    parser = new comp(System.in);
    parser.comp_input();
        }

/*********************************************************************/
  static final public void comp_input() throws ParseException {
    term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case AS:
      case BASE:
      case BREAK:
      case CASE:
      case CATCH:
      case CHECKED:
      case CLASS:
      case CONST:
      case CONTINUE:
      case _DEFAULT:
      case DO:
      case ELSE:
      case EVENT:
      case EXPLICIT:
      case EXTERN:
      case _FALSE:
      case FINALLY:
      case FIXED:
      case FOR:
      case FOREACH:
      case GOTO:
      case IF:
      case IMPLICIT:
      case IN:
      case INTERFACE:
      case INTERNAL:
      case IS:
      case LOCK:
      case NAMESPACE:
      case NEW:
      case _NULL:
      case OPERATOR:
      case OUT:
      case OVERRIDE:
      case PARAMS:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case REF:
      case RETURN:
      case SEALED:
      case SIZEOF:
      case STACKALLOC:
      case STATIC:
      case SWITCH:
      case THIS:
      case THROW:
      case _TRUE:
      case TRY:
      case TYPEOF:
      case UNCHECKED:
      case UNSAFE:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WHILE:
      case ADD:
      case ALIAS:
      case ASCENDING:
      case ASYNC:
      case AWAIT:
      case BY:
      case DESCENDING:
      case DYNAMIC:
      case EQUALS:
      case FROM:
      case GET:
      case GLOBAL:
      case GROUP:
      case INTO:
      case JOIN:
      case LET:
      case NAMEOF:
      case ON:
      case ORDERBY:
      case PARTIAL:
      case REMOVE:
      case SELECT:
      case SET:
      case UNMANAGED:
      case VALUE:
      case VAR:
      case WHEN:
      case WHERE:
      case YIELD:
      case BOOL:
      case BYTE:
      case DECIMAL:
      case DOUBLE:
      case INT:
      case FLOAT:
      case LONG:
      case SBYTE:
      case SHORT:
      case UINT:
      case ULONG:
      case USHORT:
      case CHAR:
      case DELEGATE:
      case ENUM:
      case STRUCT:
      case OBJECT:
      case STRING:
      case LBRACE:
      case RBRACE:
      case LBRACKET:
      case RBRACKET:
      case LPAREN:
      case RPAREN:
      case DOT:
      case COMMA:
      case COLON:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case PERCENT:
      case BIT_AND:
      case BAR:
      case HAT:
      case EXCLAMATION:
      case TILDE:
      case EQUAL:
      case LT:
      case GT:
      case INTERROGATION:
      case DOUBLEINTERROGATION:
      case DOUBLECOLON:
      case PLUSPLUS:
      case MINUSMINUS:
      case ANDAND:
      case DOUBLEBAR:
      case ARROW:
      case EQUALEQUAL:
      case EXCLAMATIONASSIGN:
      case LOE:
      case GOE:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case PERCENTASSIGN:
      case ANDASSIGN:
      case BARASSIGN:
      case HATASSIGN:
      case LSHIFT:
      case LSHIFTASSIGNMENT:
      case BIGARROW:
      case RSHIFT:
      case RSHIFTASSIGNMENT:
      case SINGLE_LINE_COMMENT:
      case DELIMITED_COMMENT:
      case UNICODE_ESCAPE:
      case INTEGER_LITERAL:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      term();
    }
  }

  static final public void term() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      t = jj_consume_token(LBRACE);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case RBRACE:
      t = jj_consume_token(RBRACE);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LBRACKET:
      t = jj_consume_token(LBRACKET);
                      System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case RBRACKET:
      t = jj_consume_token(RBRACKET);
                      System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LPAREN:
      t = jj_consume_token(LPAREN);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case RPAREN:
      t = jj_consume_token(RPAREN);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case DOT:
      t = jj_consume_token(DOT);
                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case COLON:
      t = jj_consume_token(COLON);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                       System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                  System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case STAR:
      t = jj_consume_token(STAR);
                  System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case SLASH:
      t = jj_consume_token(SLASH);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case PERCENT:
      t = jj_consume_token(PERCENT);
                     System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case BIT_AND:
      t = jj_consume_token(BIT_AND);
                     System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case BAR:
      t = jj_consume_token(BAR);
                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case HAT:
      t = jj_consume_token(HAT);
                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case EXCLAMATION:
      t = jj_consume_token(EXCLAMATION);
                         System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case TILDE:
      t = jj_consume_token(TILDE);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LT:
      t = jj_consume_token(LT);
                System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case GT:
      t = jj_consume_token(GT);
                System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case INTERROGATION:
      t = jj_consume_token(INTERROGATION);
                           System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case DOUBLEINTERROGATION:
      t = jj_consume_token(DOUBLEINTERROGATION);
                                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case DOUBLECOLON:
      t = jj_consume_token(DOUBLECOLON);
                         System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case PLUSPLUS:
      t = jj_consume_token(PLUSPLUS);
                      System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case MINUSMINUS:
      t = jj_consume_token(MINUSMINUS);
                        System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case ANDAND:
      t = jj_consume_token(ANDAND);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case DOUBLEBAR:
      t = jj_consume_token(DOUBLEBAR);
                       System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case ARROW:
      t = jj_consume_token(ARROW);
                   System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case EQUALEQUAL:
      t = jj_consume_token(EQUALEQUAL);
                        System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case EXCLAMATIONASSIGN:
      t = jj_consume_token(EXCLAMATIONASSIGN);
                               System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LOE:
      t = jj_consume_token(LOE);
                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case GOE:
      t = jj_consume_token(GOE);
                 System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
                        System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
                         System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
                        System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
                         System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case PERCENTASSIGN:
      t = jj_consume_token(PERCENTASSIGN);
                           System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
                       System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case BARASSIGN:
      t = jj_consume_token(BARASSIGN);
                       System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case HATASSIGN:
      t = jj_consume_token(HATASSIGN);
                       System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LSHIFT:
      t = jj_consume_token(LSHIFT);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case LSHIFTASSIGNMENT:
      t = jj_consume_token(LSHIFTASSIGNMENT);
                              System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case BIGARROW:
      t = jj_consume_token(BIGARROW);
                      System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case RSHIFT:
      t = jj_consume_token(RSHIFT);
                    System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case RSHIFTASSIGNMENT:
      t = jj_consume_token(RSHIFTASSIGNMENT);
                              System.out.println("OPERADORES E PONTUADORES: " + t.image);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                  System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case DELEGATE:
      t = jj_consume_token(DELEGATE);
                      System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case ENUM:
      t = jj_consume_token(ENUM);
                  System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case STRUCT:
      t = jj_consume_token(STRUCT);
                    System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case OBJECT:
      t = jj_consume_token(OBJECT);
                    System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case STRING:
      t = jj_consume_token(STRING);
                    System.out.println("VALORES DE REFERENCIA: " + t.image);
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
                  System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
                  System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
                     System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                    System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case INT:
      t = jj_consume_token(INT);
                 System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                   System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case LONG:
      t = jj_consume_token(LONG);
                  System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case SBYTE:
      t = jj_consume_token(SBYTE);
                   System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
                   System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case UINT:
      t = jj_consume_token(UINT);
                  System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case ULONG:
      t = jj_consume_token(ULONG);
                   System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case USHORT:
      t = jj_consume_token(USHORT);
                    System.out.println("VALORES DE TIPOS: " + t.image);
      break;
    case ADD:
      t = jj_consume_token(ADD);
                 System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ALIAS:
      t = jj_consume_token(ALIAS);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ASCENDING:
      t = jj_consume_token(ASCENDING);
                       System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ASYNC:
      t = jj_consume_token(ASYNC);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case AWAIT:
      t = jj_consume_token(AWAIT);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case BY:
      t = jj_consume_token(BY);
                System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case DESCENDING:
      t = jj_consume_token(DESCENDING);
                        System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case DYNAMIC:
      t = jj_consume_token(DYNAMIC);
                     System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case EQUALS:
      t = jj_consume_token(EQUALS);
                    System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case FROM:
      t = jj_consume_token(FROM);
                  System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case GET:
      t = jj_consume_token(GET);
                 System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case GLOBAL:
      t = jj_consume_token(GLOBAL);
                    System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case GROUP:
      t = jj_consume_token(GROUP);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case INTO:
      t = jj_consume_token(INTO);
                  System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case JOIN:
      t = jj_consume_token(JOIN);
                  System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case LET:
      t = jj_consume_token(LET);
                 System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case NAMEOF:
      t = jj_consume_token(NAMEOF);
                    System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ON:
      t = jj_consume_token(ON);
                System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ORDERBY:
      t = jj_consume_token(ORDERBY);
                     System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case PARTIAL:
      t = jj_consume_token(PARTIAL);
                     System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case REMOVE:
      t = jj_consume_token(REMOVE);
                    System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
                    System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case SET:
      t = jj_consume_token(SET);
                 System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case UNMANAGED:
      t = jj_consume_token(UNMANAGED);
                       System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case VALUE:
      t = jj_consume_token(VALUE);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case VAR:
      t = jj_consume_token(VAR);
                 System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case WHEN:
      t = jj_consume_token(WHEN);
                  System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case WHERE:
      t = jj_consume_token(WHERE);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case YIELD:
      t = jj_consume_token(YIELD);
                   System.out.println("PALAVRA CONTEXTUAL: " + t.image);
      break;
    case ABSTRACT:
      t = jj_consume_token(ABSTRACT);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case AS:
      t = jj_consume_token(AS);
                System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case BASE:
      t = jj_consume_token(BASE);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case BREAK:
      t = jj_consume_token(BREAK);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CASE:
      t = jj_consume_token(CASE);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CATCH:
      t = jj_consume_token(CATCH);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CHECKED:
      t = jj_consume_token(CHECKED);
                     System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CLASS:
      t = jj_consume_token(CLASS);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CONST:
      t = jj_consume_token(CONST);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case CONTINUE:
      t = jj_consume_token(CONTINUE);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case _DEFAULT:
      t = jj_consume_token(_DEFAULT);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case DO:
      t = jj_consume_token(DO);
                System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case EVENT:
      t = jj_consume_token(EVENT);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case EXPLICIT:
      t = jj_consume_token(EXPLICIT);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case EXTERN:
      t = jj_consume_token(EXTERN);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case _FALSE:
      t = jj_consume_token(_FALSE);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case FINALLY:
      t = jj_consume_token(FINALLY);
                     System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case FIXED:
      t = jj_consume_token(FIXED);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case FOR:
      t = jj_consume_token(FOR);
                 System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case FOREACH:
      t = jj_consume_token(FOREACH);
                     System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case GOTO:
      t = jj_consume_token(GOTO);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case IF:
      t = jj_consume_token(IF);
                System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case IMPLICIT:
      t = jj_consume_token(IMPLICIT);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case IN:
      t = jj_consume_token(IN);
                System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case INTERFACE:
      t = jj_consume_token(INTERFACE);
                       System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case INTERNAL:
      t = jj_consume_token(INTERNAL);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case IS:
      t = jj_consume_token(IS);
                System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case LOCK:
      t = jj_consume_token(LOCK);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case NAMESPACE:
      t = jj_consume_token(NAMESPACE);
                       System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case NEW:
      t = jj_consume_token(NEW);
                 System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case _NULL:
      t = jj_consume_token(_NULL);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case OPERATOR:
      t = jj_consume_token(OPERATOR);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case OUT:
      t = jj_consume_token(OUT);
                 System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case OVERRIDE:
      t = jj_consume_token(OVERRIDE);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case PARAMS:
      t = jj_consume_token(PARAMS);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case PRIVATE:
      t = jj_consume_token(PRIVATE);
                     System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case PROTECTED:
      t = jj_consume_token(PROTECTED);
                       System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case PUBLIC:
      t = jj_consume_token(PUBLIC);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case READONLY:
      t = jj_consume_token(READONLY);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case REF:
      t = jj_consume_token(REF);
                 System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case RETURN:
      t = jj_consume_token(RETURN);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case SEALED:
      t = jj_consume_token(SEALED);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case SIZEOF:
      t = jj_consume_token(SIZEOF);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case STACKALLOC:
      t = jj_consume_token(STACKALLOC);
                        System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case STATIC:
      t = jj_consume_token(STATIC);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case SWITCH:
      t = jj_consume_token(SWITCH);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case THIS:
      t = jj_consume_token(THIS);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case THROW:
      t = jj_consume_token(THROW);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case _TRUE:
      t = jj_consume_token(_TRUE);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case TRY:
      t = jj_consume_token(TRY);
                 System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case TYPEOF:
      t = jj_consume_token(TYPEOF);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case UNCHECKED:
      t = jj_consume_token(UNCHECKED);
                       System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case UNSAFE:
      t = jj_consume_token(UNSAFE);
                    System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case USING:
      t = jj_consume_token(USING);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case VIRTUAL:
      t = jj_consume_token(VIRTUAL);
                     System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case VOID:
      t = jj_consume_token(VOID);
                  System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case VOLATILE:
      t = jj_consume_token(VOLATILE);
                      System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
                   System.out.println("PALAVRA RESERVADA: " + t.image);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                           System.out.println("INTEGER_LITERAL: " + t.image);
      break;
    case UNICODE_ESCAPE:
      t = jj_consume_token(UNICODE_ESCAPE);
                          System.out.println("UNICODE: " + t.image);
      break;
    case SINGLE_LINE_COMMENT:
      t = jj_consume_token(SINGLE_LINE_COMMENT);
                               System.out.println("COMENTARIO LINHA: " + t.image);
      break;
    case DELIMITED_COMMENT:
      t = jj_consume_token(DELIMITED_COMMENT);
                             System.out.println("COMENTARIO DELIMITADO: " + t.image);
      break;
    case ID:
      t = jj_consume_token(ID);
              System.out.println("ID: " + t.image);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x400b,0x400b,};
   }

  /** Constructor with InputStream. */
  public comp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public comp(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public comp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public comp(compTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[177];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 177; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
