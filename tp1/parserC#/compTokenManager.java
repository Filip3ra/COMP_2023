/* Generated By:JavaCC: Do not edit this line. compTokenManager.java */

/** Token Manager. */
public class compTokenManager implements compConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x180L, 0x3L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e00L, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x200cL);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1e0000L, 0x4000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c00000L, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f8000000L, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf0000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x28180L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1b0000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0xe00L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x7000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000680L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x10080L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf00800000000L, active1, 0x2004L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8030000000000800L, active1, 0x1100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000000c00000L, active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000L, active1, 0x420L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000c0000000L, active1, 0x4010L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000207006000L, active1, 0x49L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80060000000100L, active1, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0x28000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000040000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x2L);
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6900000001000L, active1, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000200000000L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000040900L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa818020000000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x406000L, active1, 0x240L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x521L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000010080000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1020010002000000L, active1, 0x28000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000202a0L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c4100400L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4008L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 35);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      default :
         return 3;
   }
   return 3;
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         break;
      case 76:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400010000400100L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000c00L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(3, 17);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(3, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010004c2900000L, active1, 0x12000L);
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20004L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         break;
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(3, 64);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000880010080000L, active1, 0L);
      case 109:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000040000L, active1, 0x400L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x800L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(3, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000000L, active1, 0x100L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L, active1, 0L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(3, 73);
         return jjMoveStringLiteralDfa4_0(active0, 0x100c040000004020L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      default :
         return 4;
   }
   return 4;
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         break;
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x22002000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x18000L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(4, 23);
         break;
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 63);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(4, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x200840000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(4, 74);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080010084000L, active1, 0L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000800L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x101100000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080c0100020L, active1, 0x800L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(4, 18);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(4, 69);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(4, 72);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         break;
      default :
         return 5;
   }
   return 5;
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000000020L, active1, 0x2004L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         return jjMoveStringLiteralDfa6_0(active0, 0x200040012080000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 47);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(5, 58);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(5, 67);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(5, 48);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 103:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(5, 81);
         break;
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 51);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000008000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(5, 46);
         return jjMoveStringLiteralDfa6_0(active0, 0x100080004000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         break;
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(5, 75);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(5, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(5, 80);
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000000L, active1, 0L);
      default :
         return 6;
   }
   return 6;
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4c0000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 41);
         break;
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10080000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(6, 60);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0x4002100000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         break;
      default :
         return 7;
   }
   return 7;
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x440000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 39);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(7, 62);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(7, 77);
         return jjMoveStringLiteralDfa8_0(active0, 0x200040000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(7, 37);
         break;
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(7, 5);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         break;
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(7, 44);
         break;
      default :
         return 8;
   }
   return 8;
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(8, 42);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      default :
         return 9;
   }
   return 9;
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(9, 49);
         break;
      default :
         return 10;
   }
   return 10;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\142\163\164\162\141\143\164", "\141\163", 
"\142\141\163\145", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\145\143\153\145\144", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\104\105\106\101\125\114\124", "\144\157", "\145\154\163\145", 
"\145\166\145\156\164", "\145\170\160\154\151\143\151\164", "\145\170\164\145\162\156", 
"\106\101\114\123\105", "\146\151\156\141\154\154\171", "\146\151\170\145\144", "\146\157\162", 
"\146\157\162\145\141\143\150", "\147\157\164\157", "\151\146", "\151\155\160\154\151\143\151\164", 
"\151\156", "\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", 
"\151\163", "\154\157\143\153", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\116\125\114\114", "\157\160\145\162\141\164\157\162", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155\163", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\141\144\157\156\154\171", 
"\162\145\146", "\162\145\164\165\162\156", "\163\145\141\154\145\144", 
"\163\151\172\145\157\146", "\163\164\141\143\153\141\154\154\157\143", "\163\164\141\164\151\143", 
"\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", "\124\122\125\105", 
"\164\162\171", "\164\171\160\145\157\146", "\165\156\143\150\145\143\153\145\144", 
"\165\156\163\141\146\145", "\165\163\151\156\147", "\166\151\162\164\165\141\154", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\142\157\157\154", "\142\171\164\145", 
"\144\145\143\151\155\141\154", "\144\157\165\142\154\145", "\151\156\164", "\146\154\157\141\164", 
"\154\157\156\147", "\163\142\171\164\145", "\163\150\157\162\164", "\165\151\156\164", 
"\165\154\157\156\147", "\165\163\150\157\162\164", "\143\150\141\162", 
"\144\145\154\145\147\141\164\145", "\145\156\165\155", "\163\164\162\165\143\164", "\157\142\152\145\143\164", 
"\163\164\162\151\156\147", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[0];
static private final int[] jjstateSet = new int[0];
static protected char curChar;
/** Constructor. */
public compTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public compTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
