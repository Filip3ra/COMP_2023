/* Generated By:JavaCC: Do not edit this line. compConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACT = 5;
  /** RegularExpression Id. */
  int AS = 6;
  /** RegularExpression Id. */
  int BASE = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CASE = 9;
  /** RegularExpression Id. */
  int CATCH = 10;
  /** RegularExpression Id. */
  int CHECKED = 11;
  /** RegularExpression Id. */
  int CLASS = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int _DEFAULT = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int EVENT = 18;
  /** RegularExpression Id. */
  int EXPLICIT = 19;
  /** RegularExpression Id. */
  int EXTERN = 20;
  /** RegularExpression Id. */
  int _FALSE = 21;
  /** RegularExpression Id. */
  int FINALLY = 22;
  /** RegularExpression Id. */
  int FIXED = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int FOREACH = 25;
  /** RegularExpression Id. */
  int GOTO = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int IMPLICIT = 28;
  /** RegularExpression Id. */
  int IN = 29;
  /** RegularExpression Id. */
  int INTERFACE = 30;
  /** RegularExpression Id. */
  int INTERNAL = 31;
  /** RegularExpression Id. */
  int IS = 32;
  /** RegularExpression Id. */
  int LOCK = 33;
  /** RegularExpression Id. */
  int NAMESPACE = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int _NULL = 36;
  /** RegularExpression Id. */
  int OPERATOR = 37;
  /** RegularExpression Id. */
  int OUT = 38;
  /** RegularExpression Id. */
  int OVERRIDE = 39;
  /** RegularExpression Id. */
  int PARAMS = 40;
  /** RegularExpression Id. */
  int PRIVATE = 41;
  /** RegularExpression Id. */
  int PROTECTED = 42;
  /** RegularExpression Id. */
  int PUBLIC = 43;
  /** RegularExpression Id. */
  int READONLY = 44;
  /** RegularExpression Id. */
  int REF = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int SEALED = 47;
  /** RegularExpression Id. */
  int SIZEOF = 48;
  /** RegularExpression Id. */
  int STACKALLOC = 49;
  /** RegularExpression Id. */
  int STATIC = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int THIS = 52;
  /** RegularExpression Id. */
  int THROW = 53;
  /** RegularExpression Id. */
  int _TRUE = 54;
  /** RegularExpression Id. */
  int TRY = 55;
  /** RegularExpression Id. */
  int TYPEOF = 56;
  /** RegularExpression Id. */
  int UNCHECKED = 57;
  /** RegularExpression Id. */
  int UNSAFE = 58;
  /** RegularExpression Id. */
  int USING = 59;
  /** RegularExpression Id. */
  int VIRTUAL = 60;
  /** RegularExpression Id. */
  int VOID = 61;
  /** RegularExpression Id. */
  int VOLATILE = 62;
  /** RegularExpression Id. */
  int WHILE = 63;
  /** RegularExpression Id. */
  int BOOL = 64;
  /** RegularExpression Id. */
  int BYTE = 65;
  /** RegularExpression Id. */
  int DECIMAL = 66;
  /** RegularExpression Id. */
  int DOUBLE = 67;
  /** RegularExpression Id. */
  int INT = 68;
  /** RegularExpression Id. */
  int FLOAT = 69;
  /** RegularExpression Id. */
  int LONG = 70;
  /** RegularExpression Id. */
  int SBYTE = 71;
  /** RegularExpression Id. */
  int SHORT = 72;
  /** RegularExpression Id. */
  int UINT = 73;
  /** RegularExpression Id. */
  int ULONG = 74;
  /** RegularExpression Id. */
  int USHORT = 75;
  /** RegularExpression Id. */
  int CHAR = 76;
  /** RegularExpression Id. */
  int DELEGATE = 77;
  /** RegularExpression Id. */
  int ENUM = 78;
  /** RegularExpression Id. */
  int STRUCT = 79;
  /** RegularExpression Id. */
  int OBJECT = 80;
  /** RegularExpression Id. */
  int STRING = 81;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"abstract\"",
    "\"as\"",
    "\"base\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"checked\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"DEFAULT\"",
    "\"do\"",
    "\"else\"",
    "\"event\"",
    "\"explicit\"",
    "\"extern\"",
    "\"FALSE\"",
    "\"finally\"",
    "\"fixed\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"implicit\"",
    "\"in\"",
    "\"interface\"",
    "\"internal\"",
    "\"is\"",
    "\"lock\"",
    "\"namespace\"",
    "\"new\"",
    "\"NULL\"",
    "\"operator\"",
    "\"out\"",
    "\"override\"",
    "\"params\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"readonly\"",
    "\"ref\"",
    "\"return\"",
    "\"sealed\"",
    "\"sizeof\"",
    "\"stackalloc\"",
    "\"static\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"TRUE\"",
    "\"try\"",
    "\"typeof\"",
    "\"unchecked\"",
    "\"unsafe\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"bool\"",
    "\"byte\"",
    "\"decimal\"",
    "\"double\"",
    "\"int\"",
    "\"float\"",
    "\"long\"",
    "\"sbyte\"",
    "\"short\"",
    "\"uint\"",
    "\"ulong\"",
    "\"ushort\"",
    "\"char\"",
    "\"delegate\"",
    "\"enum\"",
    "\"struct\"",
    "\"object\"",
    "\"string\"",
  };

}
