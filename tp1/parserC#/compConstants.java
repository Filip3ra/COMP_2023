/* Generated By:JavaCC: Do not edit this line. compConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface compConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ABSTRACT = 5;
  /** RegularExpression Id. */
  int AS = 6;
  /** RegularExpression Id. */
  int BASE = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CASE = 9;
  /** RegularExpression Id. */
  int CATCH = 10;
  /** RegularExpression Id. */
  int CHECKED = 11;
  /** RegularExpression Id. */
  int CLASS = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int _DEFAULT = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int EVENT = 18;
  /** RegularExpression Id. */
  int EXPLICIT = 19;
  /** RegularExpression Id. */
  int EXTERN = 20;
  /** RegularExpression Id. */
  int _FALSE = 21;
  /** RegularExpression Id. */
  int FINALLY = 22;
  /** RegularExpression Id. */
  int FIXED = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int FOREACH = 25;
  /** RegularExpression Id. */
  int GOTO = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int IMPLICIT = 28;
  /** RegularExpression Id. */
  int IN = 29;
  /** RegularExpression Id. */
  int INTERFACE = 30;
  /** RegularExpression Id. */
  int INTERNAL = 31;
  /** RegularExpression Id. */
  int IS = 32;
  /** RegularExpression Id. */
  int LOCK = 33;
  /** RegularExpression Id. */
  int NAMESPACE = 34;
  /** RegularExpression Id. */
  int NEW = 35;
  /** RegularExpression Id. */
  int _NULL = 36;
  /** RegularExpression Id. */
  int OPERATOR = 37;
  /** RegularExpression Id. */
  int OUT = 38;
  /** RegularExpression Id. */
  int OVERRIDE = 39;
  /** RegularExpression Id. */
  int PARAMS = 40;
  /** RegularExpression Id. */
  int PRIVATE = 41;
  /** RegularExpression Id. */
  int PROTECTED = 42;
  /** RegularExpression Id. */
  int PUBLIC = 43;
  /** RegularExpression Id. */
  int READONLY = 44;
  /** RegularExpression Id. */
  int REF = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int SEALED = 47;
  /** RegularExpression Id. */
  int SIZEOF = 48;
  /** RegularExpression Id. */
  int STACKALLOC = 49;
  /** RegularExpression Id. */
  int STATIC = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int THIS = 52;
  /** RegularExpression Id. */
  int THROW = 53;
  /** RegularExpression Id. */
  int _TRUE = 54;
  /** RegularExpression Id. */
  int TRY = 55;
  /** RegularExpression Id. */
  int TYPEOF = 56;
  /** RegularExpression Id. */
  int UNCHECKED = 57;
  /** RegularExpression Id. */
  int UNSAFE = 58;
  /** RegularExpression Id. */
  int USING = 59;
  /** RegularExpression Id. */
  int VIRTUAL = 60;
  /** RegularExpression Id. */
  int VOID = 61;
  /** RegularExpression Id. */
  int VOLATILE = 62;
  /** RegularExpression Id. */
  int WHILE = 63;
  /** RegularExpression Id. */
  int ADD = 64;
  /** RegularExpression Id. */
  int ALIAS = 65;
  /** RegularExpression Id. */
  int ASCENDING = 66;
  /** RegularExpression Id. */
  int ASYNC = 67;
  /** RegularExpression Id. */
  int AWAIT = 68;
  /** RegularExpression Id. */
  int BY = 69;
  /** RegularExpression Id. */
  int DESCENDING = 70;
  /** RegularExpression Id. */
  int DYNAMIC = 71;
  /** RegularExpression Id. */
  int EQUALS = 72;
  /** RegularExpression Id. */
  int FROM = 73;
  /** RegularExpression Id. */
  int GET = 74;
  /** RegularExpression Id. */
  int GLOBAL = 75;
  /** RegularExpression Id. */
  int GROUP = 76;
  /** RegularExpression Id. */
  int INTO = 77;
  /** RegularExpression Id. */
  int JOIN = 78;
  /** RegularExpression Id. */
  int LET = 79;
  /** RegularExpression Id. */
  int NAMEOF = 80;
  /** RegularExpression Id. */
  int ON = 81;
  /** RegularExpression Id. */
  int ORDERBY = 82;
  /** RegularExpression Id. */
  int PARTIAL = 83;
  /** RegularExpression Id. */
  int REMOVE = 84;
  /** RegularExpression Id. */
  int SELECT = 85;
  /** RegularExpression Id. */
  int SET = 86;
  /** RegularExpression Id. */
  int UNMANAGED = 87;
  /** RegularExpression Id. */
  int VALUE = 88;
  /** RegularExpression Id. */
  int VAR = 89;
  /** RegularExpression Id. */
  int WHEN = 90;
  /** RegularExpression Id. */
  int WHERE = 91;
  /** RegularExpression Id. */
  int YIELD = 92;
  /** RegularExpression Id. */
  int BOOL = 93;
  /** RegularExpression Id. */
  int BYTE = 94;
  /** RegularExpression Id. */
  int DECIMAL = 95;
  /** RegularExpression Id. */
  int DOUBLE = 96;
  /** RegularExpression Id. */
  int INT = 97;
  /** RegularExpression Id. */
  int FLOAT = 98;
  /** RegularExpression Id. */
  int LONG = 99;
  /** RegularExpression Id. */
  int SBYTE = 100;
  /** RegularExpression Id. */
  int SHORT = 101;
  /** RegularExpression Id. */
  int UINT = 102;
  /** RegularExpression Id. */
  int ULONG = 103;
  /** RegularExpression Id. */
  int USHORT = 104;
  /** RegularExpression Id. */
  int CHAR = 105;
  /** RegularExpression Id. */
  int DELEGATE = 106;
  /** RegularExpression Id. */
  int ENUM = 107;
  /** RegularExpression Id. */
  int STRUCT = 108;
  /** RegularExpression Id. */
  int OBJECT = 109;
  /** RegularExpression Id. */
  int STRING = 110;
  /** RegularExpression Id. */
  int LBRACE = 111;
  /** RegularExpression Id. */
  int RBRACE = 112;
  /** RegularExpression Id. */
  int LBRACKET = 113;
  /** RegularExpression Id. */
  int RBRACKET = 114;
  /** RegularExpression Id. */
  int LPAREN = 115;
  /** RegularExpression Id. */
  int RPAREN = 116;
  /** RegularExpression Id. */
  int DOT = 117;
  /** RegularExpression Id. */
  int COMMA = 118;
  /** RegularExpression Id. */
  int COLON = 119;
  /** RegularExpression Id. */
  int SEMICOLON = 120;
  /** RegularExpression Id. */
  int PLUS = 121;
  /** RegularExpression Id. */
  int MINUS = 122;
  /** RegularExpression Id. */
  int STAR = 123;
  /** RegularExpression Id. */
  int SLASH = 124;
  /** RegularExpression Id. */
  int PERCENT = 125;
  /** RegularExpression Id. */
  int BIT_AND = 126;
  /** RegularExpression Id. */
  int BAR = 127;
  /** RegularExpression Id. */
  int HAT = 128;
  /** RegularExpression Id. */
  int EXCLAMATION = 129;
  /** RegularExpression Id. */
  int TILDE = 130;
  /** RegularExpression Id. */
  int EQUAL = 131;
  /** RegularExpression Id. */
  int LT = 132;
  /** RegularExpression Id. */
  int GT = 133;
  /** RegularExpression Id. */
  int INTERROGATION = 134;
  /** RegularExpression Id. */
  int DOUBLEINTERROGATION = 135;
  /** RegularExpression Id. */
  int DOUBLECOLON = 136;
  /** RegularExpression Id. */
  int PLUSPLUS = 137;
  /** RegularExpression Id. */
  int MINUSMINUS = 138;
  /** RegularExpression Id. */
  int ANDAND = 139;
  /** RegularExpression Id. */
  int DOUBLEBAR = 140;
  /** RegularExpression Id. */
  int ARROW = 141;
  /** RegularExpression Id. */
  int EQUALEQUAL = 142;
  /** RegularExpression Id. */
  int EXCLAMATIONASSIGN = 143;
  /** RegularExpression Id. */
  int LOE = 144;
  /** RegularExpression Id. */
  int GOE = 145;
  /** RegularExpression Id. */
  int PLUSASSIGN = 146;
  /** RegularExpression Id. */
  int MINUSASSIGN = 147;
  /** RegularExpression Id. */
  int STARASSIGN = 148;
  /** RegularExpression Id. */
  int SLASHASSIGN = 149;
  /** RegularExpression Id. */
  int PERCENTASSIGN = 150;
  /** RegularExpression Id. */
  int ANDASSIGN = 151;
  /** RegularExpression Id. */
  int BARASSIGN = 152;
  /** RegularExpression Id. */
  int HATASSIGN = 153;
  /** RegularExpression Id. */
  int LSHIFT = 154;
  /** RegularExpression Id. */
  int LSHIFTASSIGNMENT = 155;
  /** RegularExpression Id. */
  int BIGARROW = 156;
  /** RegularExpression Id. */
  int RSHIFT = 157;
  /** RegularExpression Id. */
  int RSHIFTASSIGNMENT = 158;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 159;
  /** RegularExpression Id. */
  int DELIMITED_COMMENT = 160;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE = 161;
  /** RegularExpression Id. */
  int UNI_HEX_DIGIT = 162;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 163;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER_LITERAL = 164;
  /** RegularExpression Id. */
  int DECORATED_DECIMAL_DIGIT = 165;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 166;
  /** RegularExpression Id. */
  int INTEGER_TYPE_SUFFIX = 167;
  /** RegularExpression Id. */
  int HEXADECIMAL_INTEGER_LITERAL = 168;
  /** RegularExpression Id. */
  int DECORATED_HEX_DIGIT = 169;
  /** RegularExpression Id. */
  int HEX_DIGIT = 170;
  /** RegularExpression Id. */
  int BINARY_INTEGER_LITERAL = 171;
  /** RegularExpression Id. */
  int DECORATED_BINARY_DIGIT = 172;
  /** RegularExpression Id. */
  int BINARY_DIGIT = 173;
  /** RegularExpression Id. */
  int ID = 174;
  /** RegularExpression Id. */
  int LETTER = 175;
  /** RegularExpression Id. */
  int DIGIT = 176;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"abstract\"",
    "\"as\"",
    "\"base\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"checked\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"DEFAULT\"",
    "\"do\"",
    "\"else\"",
    "\"event\"",
    "\"explicit\"",
    "\"extern\"",
    "\"FALSE\"",
    "\"finally\"",
    "\"fixed\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"implicit\"",
    "\"in\"",
    "\"interface\"",
    "\"internal\"",
    "\"is\"",
    "\"lock\"",
    "\"namespace\"",
    "\"new\"",
    "\"NULL\"",
    "\"operator\"",
    "\"out\"",
    "\"override\"",
    "\"params\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"readonly\"",
    "\"ref\"",
    "\"return\"",
    "\"sealed\"",
    "\"sizeof\"",
    "\"stackalloc\"",
    "\"static\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"TRUE\"",
    "\"try\"",
    "\"typeof\"",
    "\"unchecked\"",
    "\"unsafe\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"add\"",
    "\"alias\"",
    "\"ascending\"",
    "\"async\"",
    "\"await\"",
    "\"by\"",
    "\"descending\"",
    "\"dynamic\"",
    "\"equals\"",
    "\"from\"",
    "\"get\"",
    "\"global\"",
    "\"group\"",
    "\"into\"",
    "\"join\"",
    "\"let\"",
    "\"nameof\"",
    "\"on\"",
    "\"orderby\"",
    "\"partial\"",
    "\"remove\"",
    "\"select\"",
    "\"set\"",
    "\"unmanaged\"",
    "\"value\"",
    "\"var\"",
    "\"when\"",
    "\"where\"",
    "\"yield\"",
    "\"bool\"",
    "\"byte\"",
    "\"decimal\"",
    "\"double\"",
    "\"int\"",
    "\"float\"",
    "\"long\"",
    "\"sbyte\"",
    "\"short\"",
    "\"uint\"",
    "\"ulong\"",
    "\"ushort\"",
    "\"char\"",
    "\"delegate\"",
    "\"enum\"",
    "\"struct\"",
    "\"object\"",
    "\"string\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"?\"",
    "\"??\"",
    "\"::\"",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"->\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<\"",
    "\"<<=\"",
    "\"=>\"",
    "\">>\"",
    "\">>=\"",
    "<SINGLE_LINE_COMMENT>",
    "<DELIMITED_COMMENT>",
    "<UNICODE_ESCAPE>",
    "<UNI_HEX_DIGIT>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_INTEGER_LITERAL>",
    "<DECORATED_DECIMAL_DIGIT>",
    "<DECIMAL_DIGIT>",
    "<INTEGER_TYPE_SUFFIX>",
    "<HEXADECIMAL_INTEGER_LITERAL>",
    "<DECORATED_HEX_DIGIT>",
    "<HEX_DIGIT>",
    "<BINARY_INTEGER_LITERAL>",
    "<DECORATED_BINARY_DIGIT>",
    "<BINARY_DIGIT>",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
  };

}
