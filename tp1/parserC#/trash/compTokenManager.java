/* Generated By:JavaCC: Do not edit this line. compTokenManager.java */

/** Token Manager. */
public class compTokenManager implements compConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x20000000000000L) != 0L)
            return 14;
         if ((active1 & 0x1000000000000000L) != 0L || (active2 & 0x200000L) != 0L)
            return 70;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x7fffffffffffL) != 0L)
         {
            jjmatchedKind = 163;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffe17feffa0L) != 0L || (active1 & 0x7ffcbffddfd3L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 163;
               jjmatchedPos = 1;
            }
            return 12;
         }
         if ((active0 & 0x1e8010040L) != 0L || (active1 & 0x34002202cL) != 0L)
            return 12;
         return -1;
      case 2:
         if ((active0 & 0x802048c3000000L) != 0L || (active1 & 0x20240a401L) != 0L)
            return 12;
         if ((active0 & 0xff7fdfb614feffa0L) != 0L || (active1 & 0x7ffdfdbd5bdeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 163;
               jjmatchedPos = 2;
            }
            return 12;
         }
         return -1;
      case 3:
         if ((active0 & 0x2050001204020280L) != 0L || (active1 & 0xa4864006200L) != 0L)
            return 12;
         if ((active0 & 0xdf2fdfa4d2fcfd20L) != 0L || (active1 & 0x75b599bd19deL) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 3;
            return 12;
         }
         return -1;
      case 4:
         if ((active0 & 0x570fdfa4d258c820L) != 0L || (active1 & 0x750180bd09c4L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 4;
            return 12;
         }
         if ((active0 & 0x8820000000a43500L) != 0L || (active1 & 0xb41900101aL) != 0L)
            return 12;
         return -1;
      case 5:
         if ((active0 & 0x50dc90000100000L) != 0L || (active1 & 0x710100310900L) != 0L)
            return 12;
         if ((active0 & 0x520216a4d248c820L) != 0L || (active1 & 0x400808c00c4L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
            return 12;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000020002408800L) != 0L || (active1 & 0x800c0080L) != 0L)
            return 12;
         if ((active0 & 0x420214a4d0084020L) != 0L || (active1 & 0x40000800044L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 6;
            return 12;
         }
         return -1;
      case 7:
         if ((active0 & 0x400010a090084020L) != 0L || (active1 & 0x40000000000L) != 0L)
            return 12;
         if ((active0 & 0x202040440000000L) != 0L || (active1 & 0x800044L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 7;
            return 12;
         }
         return -1;
      case 8:
         if ((active0 & 0x200040440000000L) != 0L || (active1 & 0x800004L) != 0L)
            return 12;
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 8;
            return 12;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 37:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800800L);
      case 40:
         return jjStopAtPos(0, 115);
      case 41:
         return jjStopAtPos(0, 116);
      case 42:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40200L);
      case 44:
         return jjStopAtPos(0, 118);
      case 45:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x82400L);
      case 46:
         return jjStartNfaWithStates_0(0, 117, 14);
      case 47:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 58:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100L);
      case 59:
         return jjStopAtPos(0, 120);
      case 60:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc010000L);
      case 61:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10004000L);
      case 62:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x60020000L);
      case 63:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 113);
      case 93:
         return jjStopAtPos(0, 114);
      case 94:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60L, 0x1fL, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x180L, 0x60000020L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e00L, 0x20000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x401800000c0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1e0000L, 0x80000000100L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c00000L, 0x400000200L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x1c00L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f8000000L, 0x200002000L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x800008000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x10000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x200000060000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf0000000000L, 0x80000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x503000600000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1b0000000000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x1c000800000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x7000000000000000L, 0x3000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0xc000000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 111);
      case 124:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1001000L);
      case 125:
         return jjStopAtPos(0, 112);
      case 126:
         return jjStopAtPos(0, 130);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      case 43:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 45:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 58:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(1, 136);
         break;
      case 60:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 61:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 62:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 63:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000680L, active1, 0x3090000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0x201000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf00800000000L, active1, 0x40080708440L, active2, 0L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 12);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8030000000000800L, active1, 0x2200c000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000000c00000L, active1, 0x4010000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000L, active1, 0x8400000802L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 81, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000c0000000L, active1, 0x80200802000L, active2, 0L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000207006000L, active1, 0x920004000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80060000000100L, active1, 0x41200L, active2, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x1000000000cL, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0x500000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000040000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x10L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x40000080L, active2, 0L);
      case 124:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 158);
         break;
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000L, active1, 0L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6900000001000L, active1, 0x20000000010L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000200000000L, active1, 0x80000004L, active2, 0L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000040900L, active1, 0x1c000000L, active2, 0L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 12);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa818020000000000L, active1, 0x4002L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x40001200000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x910000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x406000L, active1, 0x4800000080L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0xa420001a00L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000010080000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x1020010002000000L, active1, 0x500000080000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000202a0L, active1, 0x40L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 12);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 12);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 12);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 12);
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c4100400L, active1, 0x40002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80100000100L, active2, 0L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 12);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000008L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 12);
         break;
      case 76:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 12);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400010000400100L, active1, 0x400800182L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000c00L, active1, 0x40L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 12);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 12);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 12);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010004c2900000L, active1, 0x240000250004L);
      case 103:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 12);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400080000010L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 12);
         break;
      case 108:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000880010080000L, active1, 0x10000000L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 12);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 12);
         break;
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 12);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000040000L, active1, 0x8000000008L);
      case 111:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 12);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x10000100000L);
      case 114:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000000L, active1, 0x2008000000L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L, active1, 0L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x100c040000004020L, active1, 0x1000080000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x100001001000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 12);
         break;
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x22002000000L, active1, 0x800L);
      case 99:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x300000200000L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 12);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 12);
         break;
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 12);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 12);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 12);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x200840000000000L, active1, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 12);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080010084000L, active1, 0x80000L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000800L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x100000100L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x80000080L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000800004L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x101100000000000L, active1, 0x10000L);
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 12);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080c0100020L, active1, 0x10000040000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 12);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 12);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 12);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 12);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 12);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000000020L, active1, 0x40080880000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 12);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x200040012080000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 12);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 12);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 12);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 12);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
      case 103:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 12);
         break;
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000008000000000L, active1, 0x80L);
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 12);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x100080004000L, active1, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 12);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 12);
         break;
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 12);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 12);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 12);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4c0000000L, active1, 0L);
      case 99:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x40L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 12);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10080000L, active1, 0x4L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 12);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 12);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x4002100000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x40000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 12);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x440000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 12);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 12);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 12);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 12);
         return jjMoveStringLiteralDfa8_0(active0, 0x200040000000000L, active1, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 12);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 12);
         break;
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 12);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 12);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 12);
         break;
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 12);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 12);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 12);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 12);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 12);
         break;
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 12);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 12);
         break;
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 122;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 166)
                        kind = 166;
                     jjCheckNAddStates(0, 15);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 20);
                  else if (curChar == 47)
                     jjAddStates(21, 22);
                  else if (curChar == 34)
                     jjCheckNAddStates(23, 27);
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  if (curChar == 48)
                     jjAddStates(28, 29);
                  break;
               case 70:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(73, 74);
                  else if (curChar == 47)
                  {
                     if (kind > 159)
                        kind = 159;
                     jjCheckNAdd(71);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 39 && kind > 161)
                     kind = 161;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddStates(30, 33);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddTwoStates(8, 6);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddStates(34, 36);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(37, 40);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(41, 43);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(23, 27);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 49);
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAdd(27);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 55);
                  break;
               case 33:
                  if (curChar == 34 && kind > 186)
                     kind = 186;
                  break;
               case 35:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 61);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 40:
                  if (curChar == 39)
                     jjCheckNAddStates(62, 67);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 75);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 80);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(81, 86);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(87, 93);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(94, 100);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(101, 106);
                  break;
               case 49:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(50, 33);
                  break;
               case 50:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 33);
                  break;
               case 51:
                  if (curChar == 48)
                     jjAddStates(28, 29);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(107, 113);
                  break;
               case 64:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(114, 120);
                  break;
               case 69:
                  if (curChar == 47)
                     jjAddStates(21, 22);
                  break;
               case 71:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 73:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar != 42)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjAddStates(121, 122);
                  break;
               case 75:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 76:
                  if (curChar == 47 && kind > 160)
                     kind = 160;
                  break;
               case 77:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 20);
                  break;
               case 78:
                  if ((0xffffef7fffffffffL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if (curChar == 39 && kind > 181)
                     kind = 181;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(123, 125);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 79);
                  break;
               case 86:
                  if (curChar == 39)
                     jjCheckNAdd(87);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 93:
                  if (curChar != 39)
                     break;
                  if (kind > 181)
                     kind = 181;
                  jjCheckNAdd(79);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 93);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(130, 132);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(0, 15);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(133, 139);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(140, 142);
                  break;
               case 107:
                  if (curChar == 46)
                     jjCheckNAdd(108);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(143, 146);
                  break;
               case 111:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(147, 149);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(150, 152);
                  break;
               case 117:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAddStates(153, 155);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(156, 158);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                     jjCheckNAdd(12);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddStates(30, 33);
                  break;
               case 8:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddTwoStates(8, 6);
                  break;
               case 10:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddStates(34, 36);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 163)
                     kind = 163;
                  jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 95)
                     jjAddStates(159, 160);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(19, 18);
                  break;
               case 20:
                  if ((0x205000002050L & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 23:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(44, 49);
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if (curChar == 92)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(50, 55);
                  break;
               case 34:
                  if (curChar == 92)
                     jjCheckNAddStates(161, 164);
                  break;
               case 35:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(68, 75);
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(76, 80);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(81, 86);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(87, 93);
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(94, 100);
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(101, 106);
                  break;
               case 48:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  jjCheckNAddTwoStates(50, 33);
                  break;
               case 52:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  jjCheckNAddStates(107, 113);
                  break;
               case 55:
                  if ((0x20100000201000L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 56:
               case 65:
               case 101:
                  if (curChar == 85)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 58:
               case 66:
               case 102:
                  if (curChar == 117)
                     jjCheckNAdd(57);
                  break;
               case 59:
               case 67:
               case 103:
                  if (curChar == 76)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x20000000200000L & l) != 0L && kind > 166)
                     kind = 166;
                  break;
               case 61:
               case 68:
               case 104:
                  if (curChar == 108)
                     jjCheckNAdd(60);
                  break;
               case 62:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 71:
                  if (kind > 159)
                     kind = 159;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
               case 75:
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 78:
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(79, 82);
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(123, 125);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(83, 79);
                  break;
               case 85:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 87:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 88:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(93, 94);
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(95, 93);
                  break;
               case 97:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(130, 132);
                  break;
               case 99:
                  if (curChar == 95)
                     jjAddStates(165, 166);
                  break;
               case 105:
                  if (curChar == 95)
                     jjAddStates(167, 168);
                  break;
               case 109:
                  if (curChar == 95)
                     jjAddStates(169, 170);
                  break;
               case 110:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 113:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(113, 112);
                  break;
               case 114:
                  if (curChar == 95)
                     jjAddStates(171, 172);
                  break;
               case 116:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 119:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(119, 118);
                  break;
               case 120:
                  if (curChar == 95)
                     jjAddStates(173, 174);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(23, 27);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(50, 33);
                  break;
               case 71:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 159)
                     kind = 159;
                  jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 122 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   99, 100, 55, 101, 102, 103, 104, 105, 106, 107, 114, 115, 116, 120, 121, 20, 
   0, 78, 85, 86, 87, 70, 72, 22, 25, 26, 33, 34, 52, 62, 8, 6, 
   9, 10, 8, 6, 9, 15, 14, 16, 20, 19, 18, 20, 22, 25, 26, 33, 
   34, 45, 22, 25, 33, 34, 40, 41, 22, 37, 25, 26, 33, 34, 22, 25, 
   26, 27, 33, 34, 22, 25, 42, 33, 34, 40, 43, 44, 22, 25, 33, 34, 
   40, 22, 25, 42, 33, 34, 40, 22, 25, 42, 33, 34, 40, 43, 22, 25, 
   46, 26, 33, 34, 47, 22, 25, 46, 26, 33, 34, 53, 54, 55, 56, 58, 
   59, 61, 63, 64, 55, 65, 66, 67, 68, 75, 76, 83, 79, 84, 95, 93, 
   96, 97, 95, 93, 96, 99, 100, 55, 101, 102, 103, 104, 105, 106, 107, 109, 
   108, 110, 20, 113, 112, 20, 114, 115, 116, 119, 118, 20, 120, 121, 20, 15, 
   14, 35, 36, 38, 28, 99, 100, 105, 106, 109, 108, 114, 115, 120, 121, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\142\163\164\162\141\143\164", "\141\163", 
"\142\141\163\145", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\145\143\153\145\144", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\104\105\106\101\125\114\124", "\144\157", "\145\154\163\145", 
"\145\166\145\156\164", "\145\170\160\154\151\143\151\164", "\145\170\164\145\162\156", 
"\106\101\114\123\105", "\146\151\156\141\154\154\171", "\146\151\170\145\144", "\146\157\162", 
"\146\157\162\145\141\143\150", "\147\157\164\157", "\151\146", "\151\155\160\154\151\143\151\164", 
"\151\156", "\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", 
"\151\163", "\154\157\143\153", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\116\125\114\114", "\157\160\145\162\141\164\157\162", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155\163", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\141\144\157\156\154\171", 
"\162\145\146", "\162\145\164\165\162\156", "\163\145\141\154\145\144", 
"\163\151\172\145\157\146", "\163\164\141\143\153\141\154\154\157\143", "\163\164\141\164\151\143", 
"\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", "\124\122\125\105", 
"\164\162\171", "\164\171\160\145\157\146", "\165\156\143\150\145\143\153\145\144", 
"\165\156\163\141\146\145", "\165\163\151\156\147", "\166\151\162\164\165\141\154", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\141\144\144", "\141\154\151\141\163", 
"\141\163\143\145\156\144\151\156\147", "\141\163\171\156\143", "\141\167\141\151\164", "\142\171", 
"\144\145\163\143\145\156\144\151\156\147", "\144\171\156\141\155\151\143", "\145\161\165\141\154\163", 
"\146\162\157\155", "\147\145\164", "\147\154\157\142\141\154", "\147\162\157\165\160", 
"\151\156\164\157", "\152\157\151\156", "\154\145\164", "\156\141\155\145\157\146", "\157\156", 
"\157\162\144\145\162\142\171", "\160\141\162\164\151\141\154", "\162\145\155\157\166\145", 
"\163\145\154\145\143\164", "\163\145\164", "\165\156\155\141\156\141\147\145\144", 
"\166\141\154\165\145", "\166\141\162", "\167\150\145\156", "\167\150\145\162\145", 
"\171\151\145\154\144", "\142\157\157\154", "\142\171\164\145", "\144\145\143\151\155\141\154", 
"\144\157\165\142\154\145", "\151\156\164", "\146\154\157\141\164", "\154\157\156\147", 
"\163\142\171\164\145", "\163\150\157\162\164", "\165\151\156\164", "\165\154\157\156\147", 
"\165\163\150\157\162\164", "\143\150\141\162", "\144\145\154\145\147\141\164\145", "\145\156\165\155", 
"\163\164\162\165\143\164", "\157\142\152\145\143\164", "\163\164\162\151\156\147", "\173", "\175", 
"\133", "\135", "\50", "\51", "\56", "\54", "\72", "\73", "\53", "\55", "\52", "\57", 
"\45", "\46", "\174", "\136", "\41", "\176", "\75", "\74", "\76", "\77", "\77\77", 
"\72\72", "\53\53", "\55\55", "\46\46", "\174\174", "\55\76", "\75\75", "\41\75", 
"\74\75", "\76\75", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", 
"\174\75", "\136\75", "\74\74", "\74\74\75", "\75\76", "\76\76", "\76\76\75", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x422004bffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[122];
static private final int[] jjstateSet = new int[244];
static protected char curChar;
/** Constructor. */
public compTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public compTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 122; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
